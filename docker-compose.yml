version: '3'

services:

  #
  # Application container for local development, NEEDS a secrets.env file!
  # URL: 0.0.0.0.xip.io
  #
  django:
    build:
      context: .
      args:
        ENVIRONMENT: development
    command: python manage.py runserver 0.0.0.0:8000 --nostatic
    depends_on:
      - mysql
      - redis
    env_file: secrets.env
    environment:
      ENVIRONMENT: development
      DJANGO_STATIC_HOST: //0.0.0.0.xip.io
    volumes:
      - .:/usr/src/app
    ports:
      - "80:8000"

  #
  # Application container for local testing of production like environement
  # URL: 0.0.0.0.xip.io
  #
  django-production:
    build:
      context: .
      args:
        ENVIRONMENT: production
    command: gunicorn -b 0.0.0.0:8000 app.wsgi
    depends_on:
      - mysql
      - redis
    env_file: secrets.env
    environment:
      ENVIRONMENT: production
      DJANGO_STATIC_HOST: //0.0.0.0.xip.io
    volumes:
      - .:/usr/src/app
    ports:
      - "80:8000"

  #
  # Database container used for local development only, ports exposed for
  # connection outside of Docker (ex. GUI tools)
  #
  # Source: https://hub.docker.com/_/mysql/
  #
  mysql:
    image: mysql:5.7
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: console_db
      MYSQL_USER: console_app
      MYSQL_PASSWORD: 12345678
    ports:
      - 3306:3306
    restart: always

  #
  # Fake mailing server / client for local development:
  # URL: 0.0.0.0.xip.io:8025
  #
  # Source: https://github.com/mailhog/MailHog
  #
  mailhog:
    image: mailhog/mailhog
    ports:
      - 8025:8025

  #
  # Container to perform tests locally
  #
  test:
    build:
      context: .
      args:
        ENVIRONMENT: test
    env_file: secrets.env
    environment:
      ENVIRONMENT: test
    command: python manage.py test --pattern="*_spec.py"
    volumes:
      - .:/usr/src/app

  #
  # Redis for caching
  #
  # Source: https://hub.docker.com/_/redis/
  #
  redis:
    image: redis:3.2-alpine
    command: redis-server --requirepass ${CACHE_SERVICE_PASSWORD}
    sysctls:
      net.core.somaxconn: 1024
    restart: always
